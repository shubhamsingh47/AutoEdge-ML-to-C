import sys
import numpy as np
from typing import Any
from src.converter.base import BaseConverter
from logger.custom_logger import CustomLogger
from exception.custom_exception import CustomException
from src.utils import load_model, detect_linear_model_kind

logger = CustomLogger().get_logger(__name__)

class LinearConverter(BaseConverter):
    """ Convert sklearn linear-like models (LinearRegression, Ridge, Lasso, ElasticNet, LogisticRegression)
    into a C header (.h) string."""
    
    def __init__(self, model_path):
        super().__init__(model_path)
        self.model = None
        
    def load(self)->None:
        self.model = load_model(self.model_path)
        
    def convert_to_c(self, func_name: str = "predict_model") -> str:
        if self.model is None:
            self.load()

        try:
            coef = np.ravel(self.model.coef_)
            intercept = float(np.ravel(self.model.intercept_)[0]) if hasattr(self.model, "intercept_") else 0.0
        except Exception as e:
            logger.exception("Failed to extract model coefficients: %s", e)
            raise CustomException("Could not extract coefficients",sys)

        model_type = detect_linear_model_kind(self.model)
        is_classification = (model_type == "classification")

        header_guard = "MODEL2C_LINEAR_H"
        lines: list[str] = []
        lines.append(f"// Auto-generated by model2c (linear). Model: {self.model.__class__.__name__}")
        lines.append(f"#ifndef {header_guard}")
        lines.append(f"#define {header_guard}")
        lines.append("")
        lines.append("#include <math.h>")
        lines.append("")
        # constants as C array
        coef_str = ", ".join(f"{float(v):.9f}f" for v in coef)
        lines.append(f"static const float MODEL_COEF[] = {{ {coef_str} }};")
        lines.append(f"static const float MODEL_INTERCEPT = {float(intercept):.9f}f;")
        lines.append("")
        lines.append(f"static inline float {func_name}(const float *features, int n_features) {{")
        lines.append("    (void)n_features;")
        lines.append("    float y = MODEL_INTERCEPT;")
        lines.append("    /* dot product */")
        lines.append("    for (int i = 0; i < (int)(sizeof(MODEL_COEF)/sizeof(MODEL_COEF[0])); ++i) {")
        lines.append("        y += MODEL_COEF[i] * features[i];")
        lines.append("    }")
        if is_classification:
            # return probability; user can threshold in caller
            lines.append("    /* logistic sigmoid for classification probability */")
            lines.append("    y = 1.0f / (1.0f + expf(-y));")
        lines.append("    return y;")
        lines.append("}")
        lines.append("")
        lines.append(f"#endif /* {header_guard} */")
        return "\n".join(lines)